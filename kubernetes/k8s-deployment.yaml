# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: ermukeshmahato/backend:v1.0.0
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://database:3306/banking_app?allowPublicKeyRetrieval=true&useSSL=false
            - name: SPRING_DATASOURCE_USERNAME
              value: root
            - name: SPRING_DATASOURCE_PASSWORD
              value: ""  # You can provide a password if required
            - name: jwt.secret-key
              value: "95276ee738ca693ec083224d18ba616c06b3504c23882ae16ebca857b037840e"
          ports:
            - containerPort: 8080  # Expose port 8080 within the container
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: ermukeshmahato/bank-frontend:v1.0.0
          ports:
            - containerPort: 3000  # Expose port 3000 within the container
---
# Database Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          env:
            - name: MYSQL_ROOT_HOST
              value: "%"
            - name: MYSQL_ROOT_PASSWORD
              value: ""  # You can set a root password here if required
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: banking_app
            - name: DATABASE_PORT
              value: "3306"
          ports:
            - containerPort: 3306  # Expose port 3306 for MySQL within the container
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8081  # External service port
      targetPort: 8080  # Container port
  type: NodePort  # Default, internal access within the cluster
---
# Frontend Service (with NodePort to expose outside the cluster)
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 8082  # External service port
      targetPort: 3000  # Container port
      nodePort: 30001  # Exposing the frontend service on port 30001
  type: NodePort  # Exposing service outside the cluster
---
# Database Service
apiVersion: v1
kind: Service
metadata:
  name: database
spec:
  selector:
    app: database
  ports:
    - protocol: TCP
      port: 3306  # External service port
      targetPort: 3306  # Container port
  type: ClusterIP  # Internal service, accessible only within the cluster
